#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <signal.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define CTRL_PORT 12345
#define NLISTENQ 4

#define IP_DAT2SERV "192.168.12.222"
#define IP_DAT1SERV "192.168.12.220"
#define IP_PWRSERV "192.168.12.221"
#define DATSERV_PORT 12345
#define PWRSERV_PORT 12345

char *serverip;
int port = 1502;
char *comname;
int boderate = 115200;

static int parse_command(int argc, char** argv);

int start_server(char *hname)
{
        struct sockaddr_in local;
        int s,rc;
        int yes = 1;

        local.sin_family = AF_INET;
        local.sin_port = htons(CTRL_PORT);

        if(hname != 0){
                inet_aton(hname, &local.sin_addr);
        }else{
                local.sin_addr.s_addr = htonl(INADDR_ANY);
        }

        s = socket(AF_INET, SOCK_STREAM, 0);

        if(s <0)
        {
                perror("socket error");
                exit(1);
        }

        if ( setsockopt(s, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) == -1 )
        {
                perror("setsockopt");
        }

        rc = bind(s, (struct sockaddr*) &local, sizeof(local));
        if(rc < 0)
        {
                perror("bind error");
                exit(1);
        }

        rc = listen(s, NLISTENQ);
        if(rc < 0)
        {
                perror("listen error");
                exit(1);
        }

        return s;

}

int send_query(char *hname, struct sockaddr_in* psaddr, char* mess, int n)
{
	int s;
	struct sockaddr_in saddr;
	
	s = socket(AF_INET, SOCK_STREAM, 0);
	if(s == -1) {
		perror("send_query error");
		exit(1);
	}
	bzero(&saddr, sizeof(saddr));

	if(hname != 0){
			inet_aton(hname, &saddr.sin_addr);
	}else{
			saddr.sin_addr.s_addr = htonl(INADDR_ANY);
	}

	saddr.sin_family = AF_INET;
	saddr.sin_port = htons(CTRL_PORT);
	
	if(connect(s, (struct sockaddr*) &saddr, sizeof(saddr)) < 0)
	{
		perror("send_query error");
		exit(1);
	}
	
	if(n > 0){
		send(s, mess, n, 0);
	}
	
	memcpy(psaddr, &saddr, sizeof(saddr));
	
	//close(s);
	return s;
}

int main(int argc, char*argv[])
{
    int server_socket;
    int master_socket;
    int esp_socket;

    int header_length;
    fd_set refset;
    fd_set rdset;    
    fd_set reftdset;
    fd_set tdset;    
    /* Maximum file descriptor number */
    int fdmax;  
    int rc;  
    struct timeval tv;
    int espidx = 0;
    char pwr_state = '0';
    
    struct sockaddr_in espaddr;
    struct sockaddr_in clientaddr;  
    
    //uint32_t datserv_addr = inet_addr(IP_DAT1SERV);
	//uint32_t pwrserv_addr = inet_addr(IP_PWRSERV);
	
	uint32_t serv_addr_list[3];
	
	int8_t threshold = 28;
	int8_t temperature = 0;
	
	uint8_t buf[128];
	
	serv_addr_list[0] = inet_addr(IP_DAT1SERV);
	serv_addr_list[1] = inet_addr(IP_DAT2SERV);
	serv_addr_list[2] = inet_addr(IP_PWRSERV);

/*
	parse_command(argc, argv);
	printf("%u\n", boderate);
	printf("%s\n", comname);
	printf("%s\n", serverip);
	printf("%u\n", port);
*/

	server_socket = start_server(0);
	
    FD_ZERO(&refset);
    FD_SET(server_socket, &refset);
    
    FD_ZERO(&reftdset);
    //FD_SET(server_socket, &reftdset);

    fdmax = server_socket;

    while(1)
    {
        rdset = refset;
        tdset = reftdset;
        tv.tv_sec = 0;
		tv.tv_usec = 80000;
        rc = select(fdmax+1, &rdset, &tdset, NULL, &tv);
        if (rc == -1) 
        {
            perror("Server select() failure.");
            return -1;
        }
        else if(rc == 0){
			//printf("\ntimeout elapsed\n");
					
			//printf("send query to 192.168.12.221\n");
			esp_socket = send_query(IP_PWRSERV, &espaddr, &pwr_state, 1);
					
			/*
			if(espidx){
				//printf("send query to 192.168.12.221\n");
				esp_socket = send_query(IP_PWRSERV, &espaddr, &pwr_state, 1);
			}else{
				//printf("send query to 192.168.12.220\n");
				esp_socket = send_query(IP_DAT1SERV, &espaddr, 0, 0);
			}							
			espidx ^= 1;*/
			
			//printf("socket %d\n", query_socket);
			if(esp_socket > 0){
				FD_SET(esp_socket, &refset);
				if (esp_socket > fdmax) 
				{
					/* Keep track of the maximum */
					fdmax = esp_socket;
				}			
			}
			continue;		
		}

        /* Run through the existing connections looking for data to be
         * read */
        for (master_socket = 0; master_socket <= fdmax; master_socket++) 
        {
			//printf("socket %d\n", master_socket);
            if (FD_ISSET(master_socket, &rdset))
            {				
                if (master_socket == server_socket) 
                {
                    /* A client is asking a new connection */
                    socklen_t addrlen;
                    int newfd;

                    /* Handle new connections */
                    addrlen = sizeof(clientaddr);
                    memset(&clientaddr, 0, sizeof(clientaddr));
                    newfd = accept(server_socket, (struct sockaddr *)&clientaddr, &addrlen);
                    if (newfd == -1) 
                    {
                        perror("Server accept() error");
                    } else 
                    {
                        FD_SET(newfd, &refset);

                        if (newfd > fdmax) 
                        {
                            /* Keep track of the maximum */
                            fdmax = newfd;
                        }
                        printf("New connection from %s:%d on socket %d\n",
                               inet_ntoa(clientaddr.sin_addr), clientaddr.sin_port, newfd);
                        //sprintf(buf, "%d:%d:%c",temperature, threshold, pwr_state);
                        sprintf(buf, "{\"temperature\":\"%d\",\"threshold\":\"%d\",\"pwr_state\":\"%c\"}",
											temperature, threshold, pwr_state);
                                               
                        // send status to client
                        send(newfd, buf, strlen(buf), 0);
                    }
                } else 
                {
                    /* An already connected client has sent a new message to us*/
					rc=recv(master_socket, buf, 128, 0);
                    if (rc > 0) 
                    {						
						// we've got the mesage
						if (master_socket == esp_socket)
						{
							// it's response from esp8266 servers
							esp_socket = -1;

							//printf("response from %s:%d on socket %d\n",
                               //inet_ntoa(espaddr.sin_addr), espaddr.sin_port, master_socket);							
							if(rc < 128){
								buf[rc] = 0;
								//printf("%s\n", buf);																						
							}
							
							if(datserv_addr == espaddr.sin_addr.s_addr)
							{
								//uint8_t t = atoi(buf);
								temperature = atoi(buf);
								//printf("temperature = %d\n", temperature);
								pwr_state = '1';
								if(temperature > threshold) pwr_state = '0';
								
							}else if(pwrserv_addr == espaddr.sin_addr.s_addr){
								//printf("pwr = %s\n", buf);
							}
						} else
						{
							// it's query for our server
							//printf("we've got the query len=%d\n", rc);
							printf("query from %s:%d on socket %d\n",
                               inet_ntoa(clientaddr.sin_addr), clientaddr.sin_port, master_socket);							
							if(rc < 128){
								buf[rc] = 0;
								printf("%s\n", buf);																						
							}
							if(0==strncmp(buf, "threshold=", 10)){
								threshold = atoi(buf+10);
							}
						}											
											
                        // Connection closed by the client, end of server 
                        //printf("close connection on socket %d\n", master_socket);
                        close(master_socket);

                        // Remove from reference set 
                        FD_CLR(master_socket, &refset);
                        if (master_socket == fdmax) 
                        {
                            fdmax--;
                        }										
						
                    } else 
                    {
                        // Connection closed by the client, end of server 
                        printf("Connection closed on socket by client %d\n", master_socket);
                        close(master_socket);

                        // Remove from reference set 
                        FD_CLR(master_socket, &refset);
                        if (master_socket == fdmax) 
                        {
                            fdmax--;
                        }
                    }
                }
            }
        } //for
    }

    printf("Quit the loop");
    return 0;
}

int parse_command(int argc, char** argv)
{
  int i = 0;

  if(argc < 5) return 0;

  for(i = 1; i < argc; i++)
  {
	  if(argv[i][0]=='-')
	  {
			switch(argv[i][1])
			{
				case 'd':
					comname = argv[i]+2;
					break;
					
				case 'b':
					boderate = atoi(&argv[i][2]);
					break;	
									
				case 'i':
					serverip = argv[i]+2;
					break;
					
				case 'p':
					port = atoi(&argv[i][2]);
					break;					
															
				default:
					return 0;
			}
	 	}

 	}/* for(i = 1; i < argc; i++) */

  return 1;
}
