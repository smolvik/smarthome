#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <signal.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define CTRL_PORT 12345
#define NLISTENQ 4

#define IP_DAT2SERV "192.168.12.222"
#define IP_DAT1SERV "192.168.12.220"
#define IP_PWRSERV  "192.168.12.221"
#define DATSERV_PORT 12345
#define PWRSERV_PORT 12345

struct esp_serv_desc
{
	struct sockaddr_in addr;
	uint32_t *mess;
	uint32_t *resp;
	struct esp_serv_desc *next;
};

static struct esp_serv_desq *esp_serv_first = 0;

char *serverip;
int port = 1502;
char *comname;
int boderate = 115200;

uint8_t pwr_state = '0';
int8_t threshold = 28;
int8_t temperature[2] = {0, 0};

struct   sockaddr_in serv_addr_list[3];
uint8_t  *serv_mess_list[3];
uint32_t serv_meslen_list[3];
uint32_t comp_controller = 0;

static int parse_command(int argc, char** argv);

int start_server(char *hname)
{
        struct sockaddr_in local;
        int s,rc;
        int yes = 1;

        local.sin_family = AF_INET;
        local.sin_port = htons(CTRL_PORT);

        if(hname != 0){
                inet_aton(hname, &local.sin_addr);
        }else{
                local.sin_addr.s_addr = htonl(INADDR_ANY);
        }

        s = socket(AF_INET, SOCK_STREAM, 0);

        if(s <0)
        {
                perror("socket error");
                exit(1);
        }

        if ( setsockopt(s, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) == -1 )
        {
                perror("setsockopt");
        }

        rc = bind(s, (struct sockaddr*) &local, sizeof(local));
        if(rc < 0)
        {
                perror("bind error");
                exit(1);
        }

        rc = listen(s, NLISTENQ);
        if(rc < 0)
        {
                perror("listen error");
                exit(1);
        }

        return s;

}

int send_query(struct sockaddr_in* psaddr, char* mess, int n)
{
 	int s;
	struct sockaddr_in saddr;
	
 	s = socket(AF_INET, SOCK_STREAM, 0);
	if(s == -1) {
		perror("send_query socket error");
		return -1;
	}
	
	if(connect(s, (struct sockaddr*) psaddr, sizeof(saddr)) < 0)
	{
		perror("send_query connect error");
		close(s);
		return -1;
	}
	
	if(n > 0){
		send(s, mess, n, 0);
	}
	
	//close(s);
	return s;
}

void init_esp_addr(char *hname, struct sockaddr_in* psaddr)
{
	struct sockaddr_in saddr;
	
	bzero(&saddr, sizeof(saddr));

	inet_aton(hname, &saddr.sin_addr);

	saddr.sin_family = AF_INET;
	saddr.sin_port = htons(CTRL_PORT);	
	
	*psaddr = saddr;	
}

void timeout_hdl(int s)
{
	
}

int main(int argc, char*argv[])
{
    int server_socket;
    int master_socket;
    int esp_socket;

    int header_length;
    fd_set refset;
    fd_set rdset;    
    fd_set reftdset;
    fd_set tdset;    
    /* Maximum file descriptor number */
    int fdmax;  
    int rc;  
    struct timeval tv;
    int espidx = 0;

	uint8_t buf[128];

	init_esp_addr(IP_PWRSERV, &serv_addr_list[0]);
	init_esp_addr(IP_DAT1SERV, &serv_addr_list[1]);
	init_esp_addr(IP_DAT2SERV, &serv_addr_list[2]);

	serv_mess_list[0] = &pwr_state;
	serv_mess_list[1] = 0;
	serv_mess_list[2] = 0;

	serv_meslen_list[0] = 1;
	serv_meslen_list[1] = 0;
	serv_meslen_list[2] = 0;

/*
	parse_command(argc, argv);
	printf("%u\n", boderate);
	printf("%s\n", comname);
	printf("%s\n", serverip);
	printf("%u\n", port);
*/

	server_socket = start_server(0);
	
	
	while(1)
	{
		sleep(1);
		printf("\ntimeout elapsed\n");
	}

	//signal(SIGALRM, timeout_hdl);
	//alarm(1);

    FD_ZERO(&refset);
    FD_SET(server_socket, &refset);

    fdmax = server_socket;

    while(1)
    {
        rdset = refset;
        tv.tv_sec = 0;
		tv.tv_usec = 80000;
        rc = select(fdmax+1, &rdset, 0, NULL, &tv);
        //rc = select(fdmax+1, &rdset, 0, 0, 0);
        if (rc == -1) 
        {
            perror("Server select() failure.");
            return -1;
        }
        else if(rc == 0)
        {
			printf("\ntimeout elapsed\n");
					
			//printf("send query to 192.168.12.221\n");
			//esp_socket = send_query(IP_PWRSERV, &espaddr, &pwr_state, 1);
			
			esp_socket = send_query((struct sockaddr_in*)(serv_addr_list+espidx), 
							serv_mess_list[espidx], serv_meslen_list[espidx]);
			espidx++;			
			(espidx == 3) && (espidx = 0);
			
			printf("socket %d\n", esp_socket);
			if(esp_socket > 0){
				FD_SET(esp_socket, &refset);
				if (esp_socket > fdmax) 
				{
					/* Keep track of the maximum */
					fdmax = esp_socket;
				}			
			}
			continue;		
		}		
		
        /* Run through the existing connections looking for data to be
         * read */
        for (master_socket = 0; master_socket <= fdmax; master_socket++) 
        {
			//printf("socket %d\n", master_socket);
            if (FD_ISSET(master_socket, &rdset))
            {				
                if (master_socket == server_socket) 
                {
                    /* A client is asking a new connection */
                    socklen_t addrlen;
                    struct sockaddr_in clientaddr;
                    int newfd;

                    /* Handle new connections */
                    addrlen = sizeof(clientaddr);
                    memset(&clientaddr, 0, sizeof(clientaddr));
                    newfd = accept(server_socket, (struct sockaddr *)&clientaddr, &addrlen);
                    if (newfd == -1) 
                    {
                        perror("Server accept() error");
                    } else 
                    {
                        FD_SET(newfd, &refset);

                        if (newfd > fdmax) 
                        {
                            /* Keep track of the maximum */
                            fdmax = newfd;
                        }
                        printf("New connection from %s:%d on socket %d\n",
                               inet_ntoa(clientaddr.sin_addr), clientaddr.sin_port, newfd);
                        //sprintf(buf, "%d:%d:%c",temperature, threshold, pwr_state);
                        sprintf(buf, "{\"temperature1\":\"%d\",\"temperature\":\"%d\",\"threshold\":\"%d\",\"pwr_state\":\"%c\"}",
											temperature[0], temperature[1], threshold, pwr_state);
                                               
                        // send status to client
                        send(newfd, buf, strlen(buf), 0);
                    }
                } else 
                {
                    /* An already connected client has sent a new message to us*/
					socklen_t len;
					struct sockaddr_storage addr;
					char ipstr[INET6_ADDRSTRLEN];
					int port;

					len = sizeof addr;
					getpeername(master_socket, (struct sockaddr*)&addr, &len);
					
					// deal with both IPv4 and IPv6:
					if (addr.ss_family == AF_INET) {
						struct sockaddr_in *s = (struct sockaddr_in *)&addr;
						port = ntohs(s->sin_port);
						inet_ntop(AF_INET, &s->sin_addr, ipstr, sizeof ipstr);
					} else { // AF_INET6
						struct sockaddr_in6 *s = (struct sockaddr_in6 *)&addr;
						port = ntohs(s->sin6_port);
						inet_ntop(AF_INET6, &s->sin6_addr, ipstr, sizeof ipstr);
					}
					printf("Peer IP address: %s\n", ipstr);
                    
					rc=recv(master_socket, buf, 128, 0);
                    if (rc > 0) 
                    {						
						// we've got the mesage
						if(rc < 128){
							buf[rc] = 0;
							printf("%s\n", buf);																						
						}
						
						struct sockaddr_in *s = (struct sockaddr_in *)&addr;
						if(s->sin_addr.s_addr == serv_addr_list[0].sin_addr.s_addr){
							// got response from power server
							printf("got response from power server\n");							
						}else
						if(s->sin_addr.s_addr == serv_addr_list[1].sin_addr.s_addr){
							temperature[0] = atoi(buf);
							printf("got response from sensor1:%d\n", temperature[0]);
						}else
						if(s->sin_addr.s_addr == serv_addr_list[2].sin_addr.s_addr){
							temperature[1] = atoi(buf);
							printf("got response from sensor2:%d\n", temperature[1]);
							if(temperature[1] == 0) printf("*************\n");
						}else{
							// it's query for our server
							uint32_t sw;
							printf("we've got the query len=%d\n", rc);
							char *ps = strstr(buf, "threshold=");
							(ps) && (threshold = atoi(ps+10));
							ps = strstr(buf, "comp_controller=");
							if(ps) {
								sw = atoi(ps+16);
								(sw<3) && (comp_controller = sw-1);
							}
							
							printf("threshold=%d:comp_controller=%d\n", threshold, comp_controller);
						}																	
						
						// switch comparator
						pwr_state = (temperature[comp_controller] > threshold)?'1':'0';

									
                        printf("close connection on socket %d\n", master_socket);
                        close(master_socket);

                        // Remove from reference set 
                        FD_CLR(master_socket, &refset);
                        if (master_socket == fdmax) 
                        {
                            fdmax--;
                        }										
						
                    } else 
                    {
                        // Connection closed by the client, end of server 
                        printf("Connection closed on socket by client %d\n", master_socket);
                        close(master_socket);

                        // Remove from reference set 
                        FD_CLR(master_socket, &refset);
                        if (master_socket == fdmax) 
                        {
                            fdmax--;
                        }
                    }
                }
            }
        } //for
    }

    printf("Quit the loop");
    return 0;
}

int parse_command(int argc, char** argv)
{
  int i = 0;

  if(argc < 5) return 0;

  for(i = 1; i < argc; i++)
  {
	  if(argv[i][0]=='-')
	  {
			switch(argv[i][1])
			{
				case 'd':
					comname = argv[i]+2;
					break;
					
				case 'b':
					boderate = atoi(&argv[i][2]);
					break;	
									
				case 'i':
					serverip = argv[i]+2;
					break;
					
				case 'p':
					port = atoi(&argv[i][2]);
					break;					
															
				default:
					return 0;
			}
	 	}

 	}/* for(i = 1; i < argc; i++) */

  return 1;
}
